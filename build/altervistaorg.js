/// <reference path="../typings/node/node.d.ts"/>
/// <reference path="../typings/request/request.d.ts"/>
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var stream_1 = require("stream");
var request = require("request");
var format = require("formatstring");
var source = "altervistaorg";
var Altervista = (function (_super) {
    __extends(Altervista, _super);
    function Altervista(options) {
        var _this = this;
        _super.call(this, { objectMode: true });
        if (typeof options === "string") {
            options = { query: options };
        }
        var query = options.query;
        var templateUrl = "http://thesaurus.altervista.org/service.php?word={word}&language=en_US&output=json&key={key}";
        // todo: to config
        // todo: make option lazy
        var url = format(templateUrl, {
            word: query,
            key: "txXYFyF4UgFiNsFY3oB7"
        });
        request(url, function (error, response, body) {
            var jsonResponse = JSON.parse(body).response;
            jsonResponse.forEach(_this._parseList, _this);
            _this.push(null);
        });
    }
    Altervista.prototype._read = function (count) {
    };
    Altervista.prototype._parseList = function (item) {
        var category = this._parseCategory(item.list.category);
        var array = item.list.synonyms.split("|");
        for (var index = 0; index < array.length; index++) {
            var word = array[index];
            var data = { word: word, category: category, source: source };
            this.push(data);
        }
    };
    Altervista.prototype._parseCategory = function (category) {
        var result = category.slice(1, -1);
        return result;
    };
    return Altervista;
})(stream_1.Readable);
;
module.exports = Altervista;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFsdGVydmlzdGFvcmcudHMiXSwibmFtZXMiOlsiQWx0ZXJ2aXN0YSIsIkFsdGVydmlzdGEuY29uc3RydWN0b3IiLCJBbHRlcnZpc3RhLl9yZWFkIiwiQWx0ZXJ2aXN0YS5fcGFyc2VMaXN0IiwiQWx0ZXJ2aXN0YS5fcGFyc2VDYXRlZ29yeSJdLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBQ2pELHVEQUF1RDs7Ozs7OztBQUV2RCx1QkFBd0MsUUFBUSxDQUFDLENBQUE7QUFDakQsSUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFDbkMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3JDLElBQU0sTUFBTSxHQUFHLGVBQWUsQ0FBQztBQU8vQjtJQUF5QkEsOEJBQVFBO0lBRWhDQSxvQkFBWUEsT0FBWUE7UUFGekJDLGlCQXdDQ0E7UUFyQ0NBLGtCQUFNQSxFQUFFQSxVQUFVQSxFQUFFQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUM1QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsT0FBT0EsS0FBS0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakNBLE9BQU9BLEdBQUdBLEVBQUVBLEtBQUtBLEVBQUVBLE9BQU9BLEVBQUVBLENBQUNBO1FBQzlCQSxDQUFDQTtRQUNEQSxJQUFLQSxLQUFLQSxHQUFJQSxPQUFPQSxDQUFoQkEsS0FBZ0JBLENBQUNBO1FBQ3RCQSxJQUFJQSxXQUFXQSxHQUFXQSw4RkFBOEZBLENBQUNBO1FBQ3pIQSxrQkFBa0JBO1FBQ2xCQSx5QkFBeUJBO1FBQ3pCQSxJQUFJQSxHQUFHQSxHQUFXQSxNQUFNQSxDQUFDQSxXQUFXQSxFQUFFQTtZQUNyQ0EsSUFBSUEsRUFBRUEsS0FBS0E7WUFDWEEsR0FBR0EsRUFBRUEsc0JBQXNCQTtTQUMzQkEsQ0FBQ0EsQ0FBQ0E7UUFFSEEsT0FBT0EsQ0FBQ0EsR0FBR0EsRUFBRUEsVUFBQ0EsS0FBS0EsRUFBRUEsUUFBUUEsRUFBRUEsSUFBSUE7WUFDbENBLElBQUlBLFlBQVlBLEdBQTRCQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUN0RUEsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsS0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFDNUNBLEtBQUlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQ2pCQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNKQSxDQUFDQTtJQUVERCwwQkFBS0EsR0FBTEEsVUFBTUEsS0FBYUE7SUFDbkJFLENBQUNBO0lBRU9GLCtCQUFVQSxHQUFsQkEsVUFBbUJBLElBQXNCQTtRQUN4Q0csSUFBSUEsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFDdkRBLElBQUlBLEtBQUtBLEdBQWtCQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUN6REEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsRUFBRUEsS0FBS0EsR0FBR0EsS0FBS0EsQ0FBQ0EsTUFBTUEsRUFBRUEsS0FBS0EsRUFBRUEsRUFBRUEsQ0FBQ0E7WUFDbkRBLElBQUlBLElBQUlBLEdBQUdBLEtBQUtBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1lBQ3hCQSxJQUFJQSxJQUFJQSxHQUFHQSxFQUFFQSxJQUFJQSxNQUFBQSxFQUFFQSxRQUFRQSxVQUFBQSxFQUFFQSxNQUFNQSxRQUFBQSxFQUFDQSxDQUFDQTtZQUNyQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDakJBLENBQUNBO0lBQ0ZBLENBQUNBO0lBRU9ILG1DQUFjQSxHQUF0QkEsVUFBdUJBLFFBQWdCQTtRQUN0Q0ksSUFBSUEsTUFBTUEsR0FBR0EsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDbkNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO0lBQ2ZBLENBQUNBO0lBQ0ZKLGlCQUFDQTtBQUFEQSxDQXhDQSxBQXdDQ0EsRUF4Q3dCLGlCQUFRLEVBd0NoQztBQUFBLENBQUM7QUFFRixBQUFvQixpQkFBWCxVQUFVLENBQUMiLCJmaWxlIjoiYWx0ZXJ2aXN0YW9yZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBpbmdzL25vZGUvbm9kZS5kLnRzXCIvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwaW5ncy9yZXF1ZXN0L3JlcXVlc3QuZC50c1wiLz5cclxuXHJcbmltcG9ydCB7UmVhZGFibGUsIFJlYWRhYmxlT3B0aW9uc30gZnJvbSBcInN0cmVhbVwiO1xyXG5pbXBvcnQgKiBhcyByZXF1ZXN0IGZyb20gXCJyZXF1ZXN0XCI7XHJcbnZhciBmb3JtYXQgPSByZXF1aXJlKFwiZm9ybWF0c3RyaW5nXCIpO1xyXG5jb25zdCBzb3VyY2UgPSBcImFsdGVydmlzdGFvcmdcIjtcclxuXHJcbmludGVyZmFjZSBJUmVzcG9uc2VFbGVtZW50IHtcclxuXHRsaXN0OiB7IGNhdGVnb3J5OiBzdHJpbmcsIHN5bm9ueW1zOiBzdHJpbmcgfTtcclxufVxyXG5cclxuXHJcbmNsYXNzIEFsdGVydmlzdGEgZXh0ZW5kcyBSZWFkYWJsZSB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM6IGFueSkge1xyXG5cdFx0c3VwZXIoeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xyXG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSB7XHJcblx0XHRcdG9wdGlvbnMgPSB7IHF1ZXJ5OiBvcHRpb25zIH07XHJcblx0XHR9XHJcblx0XHR2YXIge3F1ZXJ5fSA9IG9wdGlvbnM7XHJcblx0XHR2YXIgdGVtcGxhdGVVcmw6IHN0cmluZyA9IFwiaHR0cDovL3RoZXNhdXJ1cy5hbHRlcnZpc3RhLm9yZy9zZXJ2aWNlLnBocD93b3JkPXt3b3JkfSZsYW5ndWFnZT1lbl9VUyZvdXRwdXQ9anNvbiZrZXk9e2tleX1cIjtcclxuXHRcdC8vIHRvZG86IHRvIGNvbmZpZ1xyXG5cdFx0Ly8gdG9kbzogbWFrZSBvcHRpb24gbGF6eVxyXG5cdFx0dmFyIHVybDogc3RyaW5nID0gZm9ybWF0KHRlbXBsYXRlVXJsLCB7XHJcblx0XHRcdHdvcmQ6IHF1ZXJ5LFxyXG5cdFx0XHRrZXk6IFwidHhYWUZ5RjRVZ0ZpTnNGWTNvQjdcIlxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmVxdWVzdCh1cmwsIChlcnJvciwgcmVzcG9uc2UsIGJvZHkpID0+IHtcclxuXHRcdFx0dmFyIGpzb25SZXNwb25zZTogQXJyYXk8SVJlc3BvbnNlRWxlbWVudD4gPSBKU09OLnBhcnNlKGJvZHkpLnJlc3BvbnNlO1xyXG5cdFx0XHRqc29uUmVzcG9uc2UuZm9yRWFjaCh0aGlzLl9wYXJzZUxpc3QsIHRoaXMpO1xyXG5cdFx0XHR0aGlzLnB1c2gobnVsbCk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdF9yZWFkKGNvdW50OiBudW1iZXIpIHtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgX3BhcnNlTGlzdChpdGVtOiBJUmVzcG9uc2VFbGVtZW50KTogdm9pZCB7XHJcblx0XHR2YXIgY2F0ZWdvcnkgPSB0aGlzLl9wYXJzZUNhdGVnb3J5KGl0ZW0ubGlzdC5jYXRlZ29yeSk7XHJcblx0XHR2YXIgYXJyYXk6IEFycmF5PHN0cmluZz4gPSBpdGVtLmxpc3Quc3lub255bXMuc3BsaXQoXCJ8XCIpO1xyXG5cdFx0Zm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGFycmF5Lmxlbmd0aDsgaW5kZXgrKykge1xyXG5cdFx0XHR2YXIgd29yZCA9IGFycmF5W2luZGV4XTtcclxuXHRcdFx0dmFyIGRhdGEgPSB7IHdvcmQsIGNhdGVnb3J5LCBzb3VyY2V9O1xyXG5cdFx0XHR0aGlzLnB1c2goZGF0YSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIF9wYXJzZUNhdGVnb3J5KGNhdGVnb3J5OiBzdHJpbmcpOiBzdHJpbmcge1xyXG5cdFx0dmFyIHJlc3VsdCA9IGNhdGVnb3J5LnNsaWNlKDEsIC0xKTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0ID0gQWx0ZXJ2aXN0YTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=