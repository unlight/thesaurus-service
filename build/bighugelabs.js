/// <reference path="../typings/node/node.d.ts"/>
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var stream_1 = require("stream");
var trumpet = require("trumpet");
var request = require("request");
var Bighugelabs = (function (_super) {
    __extends(Bighugelabs, _super);
    function Bighugelabs(options) {
        var _this = this;
        _super.call(this, { objectMode: true });
        this._base = "https://words.bighugelabs.com/";
        this._categorySelector = "h3";
        this._wordSelector = "h3 + ul.words a";
        if (typeof options === "string") {
            options = { query: options };
        }
        var query = options.query, _a = options.lazy, lazy = _a === void 0 ? false : _a;
        this._query = query;
        if (!lazy) {
            process.nextTick(function () { return _this.startReading(); });
        }
    }
    Bighugelabs.prototype.getRequestUrl = function () {
        var url = this._base + this._query;
        return url;
    };
    Object.defineProperty(Bighugelabs.prototype, "source", {
        get: function () {
            return "bighugelabs";
        },
        enumerable: true,
        configurable: true
    });
    Bighugelabs.prototype.startReading = function () {
        var _this = this;
        var url = this.getRequestUrl();
        var tr = trumpet();
        var blackList = ["rhymes with"];
        var doEmit = true;
        var category = null;
        tr.selectAll(this._categorySelector, function (element) {
            element.createReadStream().on("data", function (chunk) {
                category = chunk.toString();
                doEmit = blackList.indexOf(category) == -1;
            });
        });
        tr.selectAll(this._wordSelector, function (element) {
            element.createReadStream().on("data", function (chunk) {
                var word = chunk.toString();
                _this.push({ word: word, category: category, source: _this.source });
            });
        });
        tr.on("end", function () { return _this.push(null); });
        request(url).pipe(tr);
        this.startReading = function () { };
    };
    Bighugelabs.prototype._read = function () {
        this.startReading();
        return null;
    };
    return Bighugelabs;
})(stream_1.Readable);
module.exports = Bighugelabs;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpZ2h1Z2VsYWJzLnRzIl0sIm5hbWVzIjpbIkJpZ2h1Z2VsYWJzIiwiQmlnaHVnZWxhYnMuY29uc3RydWN0b3IiLCJCaWdodWdlbGFicy5nZXRSZXF1ZXN0VXJsIiwiQmlnaHVnZWxhYnMuc291cmNlIiwiQmlnaHVnZWxhYnMuc3RhcnRSZWFkaW5nIiwiQmlnaHVnZWxhYnMuX3JlYWQiXSwibWFwcGluZ3MiOiJBQUFBLGlEQUFpRDs7Ozs7OztBQUdqRCx1QkFBd0MsUUFBUSxDQUFDLENBQUE7QUFDakQsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pDLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUVqQztJQUEwQkEsK0JBQVFBO0lBT2pDQSxxQkFBWUEsT0FBT0E7UUFQcEJDLGlCQTREQ0E7UUFwRENBLGtCQUFNQSxFQUFFQSxVQUFVQSxFQUFFQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQTtRQU5uQkEsVUFBS0EsR0FBV0EsZ0NBQWdDQSxDQUFDQTtRQUNqREEsc0JBQWlCQSxHQUFXQSxJQUFJQSxDQUFDQTtRQUNqQ0Esa0JBQWFBLEdBQVdBLGlCQUFpQkEsQ0FBQ0E7UUFLbkRBLEVBQUVBLENBQUNBLENBQUNBLE9BQU9BLE9BQU9BLEtBQUtBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO1lBQ2pDQSxPQUFPQSxHQUFHQSxFQUFFQSxLQUFLQSxFQUFFQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUM5QkEsQ0FBQ0E7UUFDREEsSUFBS0EsS0FBS0EsR0FBa0JBLE9BQU9BLENBQTlCQSxLQUFLQSxPQUFrQkEsT0FBT0EsQ0FBdkJBLElBQUlBLEVBQUpBLElBQUlBLG1CQUFHQSxLQUFLQSxLQUFXQSxDQUFDQTtRQUNwQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFFcEJBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO1lBQ1hBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLGNBQU1BLE9BQUFBLEtBQUlBLENBQUNBLFlBQVlBLEVBQUVBLEVBQW5CQSxDQUFtQkEsQ0FBQ0EsQ0FBQ0E7UUFDN0NBLENBQUNBO0lBQ0ZBLENBQUNBO0lBRURELG1DQUFhQSxHQUFiQTtRQUNDRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUNuQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7SUFDWkEsQ0FBQ0E7SUFFREYsc0JBQWNBLCtCQUFNQTthQUFwQkE7WUFDQ0csTUFBTUEsQ0FBQ0EsYUFBYUEsQ0FBQ0E7UUFDdEJBLENBQUNBOzs7T0FBQUg7SUFFREEsa0NBQVlBLEdBQVpBO1FBQUFJLGlCQXlCQ0E7UUF4QkFBLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLGFBQWFBLEVBQUVBLENBQUNBO1FBQy9CQSxJQUFJQSxFQUFFQSxHQUFHQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUNuQkEsSUFBSUEsU0FBU0EsR0FBR0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7UUFDaENBLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBO1FBQ2xCQSxJQUFJQSxRQUFRQSxHQUFXQSxJQUFJQSxDQUFDQTtRQUU1QkEsRUFBRUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxVQUFDQSxPQUFPQTtZQUM1Q0EsT0FBT0EsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxNQUFNQSxFQUFFQSxVQUFDQSxLQUFLQTtnQkFDM0NBLFFBQVFBLEdBQUdBLEtBQUtBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBO2dCQUM1QkEsTUFBTUEsR0FBR0EsU0FBU0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDNUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ0pBLENBQUNBLENBQUNBLENBQUNBO1FBRUhBLEVBQUVBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLEVBQUVBLFVBQUNBLE9BQU9BO1lBQ3hDQSxPQUFPQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLE1BQU1BLEVBQUVBLFVBQUNBLEtBQUtBO2dCQUMzQ0EsSUFBSUEsSUFBSUEsR0FBR0EsS0FBS0EsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0E7Z0JBQzVCQSxLQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxJQUFJQSxNQUFBQSxFQUFFQSxRQUFRQSxVQUFBQSxFQUFFQSxNQUFNQSxFQUFFQSxLQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNwREEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDSkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFSEEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsS0FBS0EsRUFBRUEsY0FBTUEsT0FBQUEsS0FBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBZkEsQ0FBZUEsQ0FBQ0EsQ0FBQ0E7UUFFcENBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxjQUFRQSxDQUFDQSxDQUFDQTtJQUMvQkEsQ0FBQ0E7SUFFREosMkJBQUtBLEdBQUxBO1FBQ0NLLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLENBQUNBO1FBQ3BCQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtJQUNiQSxDQUFDQTtJQUNGTCxrQkFBQ0E7QUFBREEsQ0E1REEsQUE0RENBLEVBNUR5QixpQkFBUSxFQTREakM7QUFFRCxBQUFxQixpQkFBWixXQUFXLENBQUMiLCJmaWxlIjoiYmlnaHVnZWxhYnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwaW5ncy9ub2RlL25vZGUuZC50c1wiLz5cclxuXHJcbmltcG9ydCB7U2VydmVyUmVzcG9uc2V9IGZyb20gXCJodHRwXCI7XHJcbmltcG9ydCB7UmVhZGFibGUsIFJlYWRhYmxlT3B0aW9uc30gZnJvbSBcInN0cmVhbVwiO1xyXG52YXIgdHJ1bXBldCA9IHJlcXVpcmUoXCJ0cnVtcGV0XCIpO1xyXG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoXCJyZXF1ZXN0XCIpO1xyXG5cclxuY2xhc3MgQmlnaHVnZWxhYnMgZXh0ZW5kcyBSZWFkYWJsZSB7XHJcblxyXG5cdHByb3RlY3RlZCBfYmFzZTogc3RyaW5nID0gXCJodHRwczovL3dvcmRzLmJpZ2h1Z2VsYWJzLmNvbS9cIjtcclxuXHRwcm90ZWN0ZWQgX2NhdGVnb3J5U2VsZWN0b3I6IHN0cmluZyA9IFwiaDNcIjtcclxuXHRwcm90ZWN0ZWQgX3dvcmRTZWxlY3Rvcjogc3RyaW5nID0gXCJoMyArIHVsLndvcmRzIGFcIjtcclxuXHRwcm90ZWN0ZWQgX3F1ZXJ5O1xyXG5cclxuXHRjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcblx0XHRzdXBlcih7IG9iamVjdE1vZGU6IHRydWUgfSk7XHJcblx0XHRpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcclxuXHRcdFx0b3B0aW9ucyA9IHsgcXVlcnk6IG9wdGlvbnMgfTtcclxuXHRcdH1cclxuXHRcdHZhciB7cXVlcnksIGxhenkgPSBmYWxzZX0gPSBvcHRpb25zO1xyXG5cdFx0dGhpcy5fcXVlcnkgPSBxdWVyeTtcclxuXHJcblx0XHRpZiAoIWxhenkpIHtcclxuXHRcdFx0cHJvY2Vzcy5uZXh0VGljaygoKSA9PiB0aGlzLnN0YXJ0UmVhZGluZygpKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldFJlcXVlc3RVcmwoKSB7XHJcblx0XHR2YXIgdXJsID0gdGhpcy5fYmFzZSArIHRoaXMuX3F1ZXJ5O1xyXG5cdFx0cmV0dXJuIHVybDtcclxuXHR9XHJcblxyXG5cdHByb3RlY3RlZCBnZXQgc291cmNlKCkge1xyXG5cdFx0cmV0dXJuIFwiYmlnaHVnZWxhYnNcIjtcclxuXHR9XHJcblxyXG5cdHN0YXJ0UmVhZGluZygpIHtcclxuXHRcdHZhciB1cmwgPSB0aGlzLmdldFJlcXVlc3RVcmwoKTtcclxuXHRcdHZhciB0ciA9IHRydW1wZXQoKTtcclxuXHRcdHZhciBibGFja0xpc3QgPSBbXCJyaHltZXMgd2l0aFwiXTtcclxuXHRcdHZhciBkb0VtaXQgPSB0cnVlO1xyXG5cdFx0dmFyIGNhdGVnb3J5OiBzdHJpbmcgPSBudWxsO1xyXG5cclxuXHRcdHRyLnNlbGVjdEFsbCh0aGlzLl9jYXRlZ29yeVNlbGVjdG9yLCAoZWxlbWVudCkgPT4ge1xyXG5cdFx0XHRlbGVtZW50LmNyZWF0ZVJlYWRTdHJlYW0oKS5vbihcImRhdGFcIiwgKGNodW5rKSA9PiB7XHJcblx0XHRcdFx0Y2F0ZWdvcnkgPSBjaHVuay50b1N0cmluZygpO1xyXG5cdFx0XHRcdGRvRW1pdCA9IGJsYWNrTGlzdC5pbmRleE9mKGNhdGVnb3J5KSA9PSAtMTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHR0ci5zZWxlY3RBbGwodGhpcy5fd29yZFNlbGVjdG9yLCAoZWxlbWVudCkgPT4ge1xyXG5cdFx0XHRlbGVtZW50LmNyZWF0ZVJlYWRTdHJlYW0oKS5vbihcImRhdGFcIiwgKGNodW5rKSA9PiB7XHJcblx0XHRcdFx0dmFyIHdvcmQgPSBjaHVuay50b1N0cmluZygpO1xyXG5cdFx0XHRcdHRoaXMucHVzaCh7IHdvcmQsIGNhdGVnb3J5LCBzb3VyY2U6IHRoaXMuc291cmNlIH0pO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRyLm9uKFwiZW5kXCIsICgpID0+IHRoaXMucHVzaChudWxsKSk7XHJcblxyXG5cdFx0cmVxdWVzdCh1cmwpLnBpcGUodHIpO1xyXG5cdFx0dGhpcy5zdGFydFJlYWRpbmcgPSAoKSA9PiB7IH07XHJcblx0fVxyXG5cclxuXHRfcmVhZCgpIHtcclxuXHRcdHRoaXMuc3RhcnRSZWFkaW5nKCk7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IEJpZ2h1Z2VsYWJzOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==